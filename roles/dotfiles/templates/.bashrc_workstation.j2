{% if yubikey is defined and yubikey.enabled -%}
# Yubikey setup
export SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh # enable yubikey as SSH agent
alias yubi-fix='gpg-connect-agent updatestartuptty /bye'
alias yubi-restart='sudo systemctl restart pcscd.service && systemctl --user restart gpg-agent.service'
{% endif %}

{% if go is defined and go.enabled -%}
# Golang setup
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOROOT/bin:/usr/local/go/bin:$HOME/go/bin:$PATH
{% if go.env.gonoproxy -%}
export GONOPROXY='{{go.env.gonoproxy}}'
{% endif %}
{% if go.env.gonosumdb -%}
export GONOSUMDB='{{go.env.gonosumdb}}'
{% endif %}
{% if go.env.goproxy -%}
export GOPROXY='{{go.env.goproxy}}'
{% endif %}

# golangci-lint setup
alias gci='golangci-lint run'
alias gci-fix='golangci-lint run --fix --max-same-issues 10 --max-issues-per-linter 50'
{% endif %}

{% if wireguard is defined and wireguard.enabled -%}
# Wireguard VPN aliases
alias vpn-up='nmcli connection up "{{ wireguard.alias_vpn_name }}"'
alias vpn-down='nmcli connection down "{{ wireguard.alias_vpn_name }}"'
alias vpn='nm-connection-editor'
{% endif %}

{% if rust is defined and rust.enabled -%}
# Rust setup
. "$HOME/.cargo/env"
{% endif %}

{% if git is defined and git.enabled -%}
# Git setup
alias git-main='git checkout main && git pull'
alias git-su='git submodule -q foreach git pull -q origin main'
alias git-amend='git add . && git commit {% if git.signingkey is defined or (git.enableGlobalSigning is defined and git.enableGlobalSigning) %}-S{% endif %} --amend --no-edit'
alias gsu='git submodule update --init --rebase --recursive'
alias git-continue='git add . && git rebase --continue'
{% endif %}

{% if docker is defined and docker.enabled -%}
# Docker setup
alias docker-clean='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'
{% endif %}

{% if ccc_hub is defined and ccc_hub.enabled -%}
# Hub setup
alias hub-check-format='uv run task format && uv run task lint'

alias hub-apply-format='ruff check . --fix && ruff format .'
alias hub-apply-lint='djlint --profile django -e html --reformat --lint .'

alias hub-source='source ~/venvs/hub/bin/activate'
alias hub-run='docker compose -f docker-compose.yml -f .local/docker-compose.yml up'

alias hub-build-static='(cd src/plainui/ && sudo yarn build)'
alias hub-build-msgs='uv run task manage makemessages && uv run task compilemessages && uv run task manage collectstatic --noinput && docker compose restart hub'
alias hub-build-images='echo "Might need to run this multiple times" && docker compose build'

hub-tests-core() {
  (cd src/ && coverage run ./manage.py test core.tests$1 -v 2 --failfast)
}
hub-tests-api() {
  (cd src/ && coverage run ./manage.py test api.tests$1 -v 2 --failfast)
}
hub-tests-plainui() {
  (cd src/ && coverage run ./manage.py test plainui.tests$1 -v 2 --failfast)
}
hub-tests-backoffice() {
  (cd src/ && coverage run ./manage.py test backoffice.tests$1 -v 2 --failfast)
}
{% endif %}

{% if flutter is defined and flutter.enabled %}
# Flutter setup
export PATH="{{ user_home_directory }}/flutter/flutter/bin:$PATH"
{% endif %}

# Enable fzf search
source /usr/share/doc/fzf/examples/key-bindings.bash

# Use starship prompt
eval "$(starship init bash)"

# Terminal settings
export TERM='xterm'
export EDITOR='nano'